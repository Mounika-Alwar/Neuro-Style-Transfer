# -*- coding: utf-8 -*-
"""Weather_prediction_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10qN7reGOrC-rJ-hlChBhy7msEU32Q8zU
"""

import streamlit as st
import requests
from datetime import datetime
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

def get_weather_data(city_name):
    api_key = "519ca0253f00f5cd6f7d383f208533cd"
    base_url = "http://api.openweathermap.org/data/2.5/weather?"
    complete_url = f"{base_url}q={city_name}&appid={api_key}&units=metric"
    response = requests.get(complete_url)
    return response.json()

def get_weather_forecast(city_name):
    api_key = "519ca0253f00f5cd6f7d383f208533cd"
    base_url = "http://api.openweathermap.org/data/2.5/forecast?"
    complete_url = f"{base_url}q={city_name}&appid={api_key}&units=metric"
    response = requests.get(complete_url)
    return response.json()

def prepare_forecast_data(weather_data):
    times = []
    temperatures = []
    humidities = []
    pressures = []
    wind_speeds = []
    for entry in weather_data['list']:
        times.append(pd.to_datetime(entry['dt'], unit='s'))
        temperatures.append(entry['main']['temp'])
        humidities.append(entry['main']['humidity'])
        pressures.append(entry['main']['pressure'])
        wind_speeds.append(entry['wind']['speed'])
    df = pd.DataFrame({
        'datetime': times,
        'temperature': temperatures,
        'humidity': humidities,
        'pressure': pressures,
        'wind_speed': wind_speeds,
    })
    return df

st.title("Weather Forecast and Prediction")

city_name = st.text_input("Enter the city name:")
if city_name:
    weather_data = get_weather_data(city_name)
    if weather_data['cod'] == 200:
        st.subheader(f"Current Weather in {weather_data['name']}, {weather_data['sys']['country']}:")
        st.write(f"Temperature: {weather_data['main']['temp']}Â°C")
        st.write(f"Humidity: {weather_data['main']['humidity']}%")
        st.write(f"Pressure: {weather_data['main']['pressure']} hPa")
        st.write(f"Wind Speed: {weather_data['wind']['speed']} m/s")
        st.write(f"Weather Description: {weather_data['weather'][0]['description']}")
        st.write(f"Time of data: {datetime.utcfromtimestamp(weather_data['dt']).strftime('%Y-%m-%d %H:%M:%S')}")

        weather_forecast = get_weather_forecast(city_name)
        df = prepare_forecast_data(weather_forecast)
        df['datetime_num'] = df['datetime'].astype('int64') // 10**9

        degree = 5
        polynomial_features = PolynomialFeatures(degree=degree)
        linear_regression = LinearRegression()
        model = make_pipeline(polynomial_features, linear_regression)

        last_datetime_num = df['datetime_num'].iloc[-1]
        X_test = np.array([last_datetime_num + i * 3 * 60 * 60 for i in range(1, 9)]).reshape(-1, 1)

        X_temp = df[['datetime_num']]
        y_temp = df['temperature']
        model.fit(X_temp, y_temp)
        y_temp_pred = model.predict(X_test)

        X_hum = df[['datetime_num']]
        y_hum = df['humidity']
        model.fit(X_hum, y_hum)
        y_hum_pred = model.predict(X_test)

        X_pre = df[['datetime_num']]
        y_pre = df['pressure']
        model.fit(X_pre, y_pre)
        y_pre_pred = model.predict(X_test)

        X_win = df[['datetime_num']]
        y_win = df['wind_speed']
        model.fit(X_win, y_win)
        y_win_pred = model.predict(X_test)

        df_temp_pred = pd.DataFrame({'datetime_num': X_test.flatten(), 'temperature': y_temp_pred, 'predicted': 'Yes'})
        df_hum_pred = pd.DataFrame({'datetime_num': X_test.flatten(), 'humidity': y_hum_pred})
        df_pre_pred = pd.DataFrame({'datetime_num': X_test.flatten(), 'pressure': y_pre_pred})
        df_win_pred = pd.DataFrame({'datetime_num': X_test.flatten(), 'wind_speed': y_win_pred})

        df_temp_hum = pd.merge(df_temp_pred, df_hum_pred, on='datetime_num', how='inner')
        df_pre_win = pd.merge(df_pre_pred, df_win_pred, on='datetime_num', how='inner')
        df_all_pred = pd.merge(df_temp_hum, df_pre_win, on='datetime_num', how='inner')
        df_all = pd.concat([df, df_all_pred], ignore_index=True)
        df_all['predicted'] = df_all['predicted'].fillna("No")
        df_all['datetime'] = df_all['datetime'].fillna(pd.to_datetime(df_all['datetime_num'], unit='s'))

        dropdown_options = ['temperature', 'humidity', 'pressure', 'wind_speed']
        fig = go.Figure()

        for attribute in dropdown_options:
            yes_trace = go.Scatter(x=df_all[df_all['predicted'] == 'Yes']['datetime'],
                                   y=df_all[df_all['predicted'] == 'Yes'][attribute],
                                   mode='lines+markers',
                                   name=f'Predicted {attribute.capitalize()}',
                                   line=dict(color='blue'))
            no_trace = go.Scatter(x=df_all[df_all['predicted'] == 'No']['datetime'],
                                  y=df_all[df_all['predicted'] == 'No'][attribute],
                                  mode='lines+markers',
                                  name=f'Forecasted {attribute.capitalize()}',
                                  line=dict(color='black'))
            fig.add_trace(yes_trace)
            fig.add_trace(no_trace)

        fig.update_layout(
            title="Weather Data Over Time",
            xaxis_title="Date/Time",
            yaxis_title="Value",
            updatemenus=[
                {
                    'buttons': [
                        {
                            'args': [{'visible': [True, True, False, False, False, False, False, False]}],
                            'label': 'Temperature',
                            'method': 'update',
                        },
                        {
                            'args': [{'visible': [False, False, True, True, False, False, False, False]}],
                            'label': 'Humidity',
                            'method': 'update',
                        },
                        {
                            'args': [{'visible': [False, False, False, False, True, True, False, False]}],
                            'label': 'Pressure',
                            'method': 'update',
                        },
                        {
                            'args': [{'visible': [False, False, False, False, False, False, True, True]}],
                            'label': 'Wind Speed',
                            'method': 'update',
                        },
                    ],
                    'direction': 'down',
                    'showactive': True,
                }
            ]
        )

        st.plotly_chart(fig)
    else:
        st.error("City not found. Please try again.")



